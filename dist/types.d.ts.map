{"mappings":";AACA;IACE,KAAK,CAAC,EAAE,MAAM,SAAS,CAAA;IACvB,IAAI,CAAC,EAAE,MAAM,SAAS,CAAA;IACtB,KAAK,CAAC,EAAE,MAAM,SAAS,CAAA;IACvB,MAAM,CAAC,EAAE,MAAM,SAAS,CAAA;IACxB,MAAM,CAAC,EAAE,MAAM,SAAS,CAAA;IAExB,MAAM,EAAE,MAAM,CAAA;CACf;AACD;IACE,UAAU,EAAE,MAAM,CAAA;IAClB,MAAM,EAAE,SAAS,CAAA;IACjB,QAAQ,EAAE,OAAO,CAAA;CAClB;AGdD,8BAA+B,SAAQ,KAAK;IAC1C,IAAI,MAAM,IAAI,MAAM,CAAA;CACrB;AAED,0BAA2B,SAAQ,KAAM,YAAW,aAAa;gBAGnD,OAAO,EAAE,MAAM;IAK3B,IAAW,MAAM,WAEhB;CACF;AAED,4BAA6B,SAAQ,KAAM,YAAW,aAAa;gBAErD,OAAO,EAAE,MAAM;IAK3B,IAAW,MAAM,WAEhB;CACF;AAED,gCAAiC,SAAQ,KAAM,YAAW,aAAa;gBAEzD,OAAO,EAAE,MAAM;IAK3B,IAAW,MAAM,WAEhB;CACF;AAED,qCAAsC,SAAQ,KAAM,YAAW,aAAa;gBAE9D,OAAO,EAAE,MAAM;IAK3B,IAAW,MAAM,WAEhB;CACF;AACD,2BAA4B,SAAQ,KAAM,YAAW,aAAa;gBAEpD,OAAO,EAAE,MAAM;IAK3B,IAAW,MAAM,WAEhB;CACF;AEzDD,wBAAwB,QAAQ,EAAE,QAAQ,EAAE,KAAK,EAAE,aAAa,QAM/D;AAED,0BACE,QAAQ,EAAE,QAAQ,EAClB,UAAU,EAAE,MAAM,EAClB,IAAI,EAAE,MAAM,QAMb;AQVD;IACE,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,CAAA;IACtB,OAAO,EAAE,MAAM,CAAA;IACf,OAAO,EAAE,MAAM,CAAA;CAChB;AACD,0BAA2B,YAAW,SAAS;IACtC,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,CAA2B;IACjD,OAAO,EAAE,MAAM,CAAA;IACf,OAAO,EAAE,MAAM,CAAA;gBAGV,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC;IAO3B,SAAS;CA6CjB;AAED;IACE,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,CAAA;IACtB,UAAU,EAAE,MAAM,CAAW;gBACjB,OAAO,EAAE,KAAK,CAAC,MAAM,CAAC,EAAE,UAAU,GAAE,MAAwB;IAKlE,aAAa,CAAC,UAAU,EAAE,MAAM;IA2MtC,YAAY,CAAC,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,MAAM;CAe9C","sources":["src/src/modules/module-interface.ts","src/src/modules/auth/auth-repository.ts","src/src/core/config/env/index.ts","src/src/core/helpers/error.ts","src/src/core/interfaces/response-interface.ts","src/src/core/helpers/response.ts","src/src/core/middlewares/auth/verifyToken.ts","src/src/core/providers/nodemailer.ts","src/src/modules/auth/auth-interfaces.ts","src/src/modules/auth/auth-service.ts","src/src/modules/auth/auth-controller.ts","src/src/modules/auth/auth-router.ts","src/src/modules/auth/auth-module.ts","src/src/index.ts","src/index.ts"],"sourcesContent":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,"'use strict'\r\nimport fs from 'fs'\r\nimport express, { Application, Router } from 'express'\r\nimport { Module } from './modules/module-interface'\r\nimport cors from 'cors'\r\nimport { verifyToken } from './core/middlewares/auth/verifyToken'\r\nimport { Config } from './core/config/env'\r\nimport AuthModule from './modules/auth/auth-module'\r\nimport morgan from 'morgan'\r\n\r\nexport { onSuccess, onError } from './core/helpers/response'\r\nexport * from './core/helpers/error'\r\nexport interface Bootstrap {\r\n  modules: Array<Module>\r\n  context: string\r\n  version: string\r\n}\r\nexport class PullupModules implements Bootstrap {\r\n  public modules: Array<Module> = [new AuthModule('auth')]\r\n  public context: string\r\n  public version: string\r\n  private _env: Config\r\n\r\n  constructor(modules: Array<Module>) {\r\n    this._env = Config.instance\r\n    this.modules = this.modules.concat(modules)\r\n    this.context = this._env.config.apiContext || 'api'\r\n    this.version = this._env.config.apiVersion || 'v1'\r\n  }\r\n\r\n  public bootstrap() {\r\n    const router: Router = Router()\r\n    const app: Application = express()\r\n\r\n    app.disable('x-powered-by')\r\n    app.use(morgan('dev'))\r\n    app.use(\r\n      cors({\r\n        allowedHeaders: [\r\n          'Origin',\r\n          'X-Requested-With',\r\n          'Content-Type',\r\n          'queue-token',\r\n          'Accept',\r\n          'X-Access-Token',\r\n          'Authorization',\r\n        ],\r\n        credentials: true,\r\n        methods: 'GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE',\r\n        origin: '*',\r\n        preflightContinue: false,\r\n      })\r\n    )\r\n    app.use(express.json({ limit: '5mb' }))\r\n    app.use(express.urlencoded({ extended: true }))\r\n\r\n    this.modules.forEach((module) => {\r\n      router.use(\r\n        `/${this.context}/${this.version}/${module.moduleName}`,\r\n        -!module.isPublic ? verifyToken : (_, __, next) => next(),\r\n        module.router.router\r\n      )\r\n    })\r\n    app.use(router)\r\n\r\n    app\r\n      .listen(this._env.config.serverPort, () => {\r\n        console.log(\r\n          `Server up and running on port: ${this._env.config.serverPort} `\r\n        )\r\n      })\r\n      .on('error', (error) => console.error(`Error: ${error}`))\r\n\r\n    return app\r\n  }\r\n}\r\n\r\nexport class StartModules {\r\n  modules: Array<string>\r\n  folderName: string = 'unknow'\r\n  constructor(modules: Array<string>, folderName: string = 'unknowContext') {\r\n    this.folderName = folderName\r\n    this.modules = modules\r\n  }\r\n\r\n  async createModules(srcDirName: string) {\r\n    const moduleFiles: string[] = []\r\n    let files: any\r\n    if (!fs.existsSync(`${srcDirName}/modules`)) {\r\n      fs.mkdirSync(`${srcDirName}/modules`, { recursive: true })\r\n    }\r\n\r\n    files = fs.readdirSync(`${srcDirName}/modules`)\r\n\r\n    this.modules.forEach((module) => {\r\n      let isOk = true\r\n      for (const file in files) {\r\n        if (file === module) {\r\n          isOk = false\r\n        }\r\n      }\r\n      if (isOk) {\r\n        moduleFiles.push(module)\r\n      }\r\n    })\r\n\r\n    moduleFiles.forEach((moduleFile) => {\r\n      let modelName = moduleFile.charAt(0).toUpperCase() + moduleFile.slice(1)\r\n      if (!fs.existsSync(`${srcDirName}/modules/${moduleFile}`)) {\r\n        fs.mkdir(\r\n          `${srcDirName}/modules/${moduleFile}`,\r\n          { recursive: true },\r\n          (err) => {\r\n            if (err) console.error(err)\r\n          }\r\n        )\r\n      }\r\n\r\n      if (\r\n        fs.existsSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/controller-sample.txt'\r\n        )\r\n      ) {\r\n        let controller = fs.readFileSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/controller-sample.txt'\r\n        )\r\n        const controllerCode = Buffer.from(controller)\r\n          .toString()\r\n          .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n          .replace(/{{MODEL_NAME}}/g, modelName)\r\n        fs.writeFile(\r\n          `${srcDirName}/modules/${moduleFile}/${moduleFile}-controller.ts`,\r\n          controllerCode,\r\n          (err) => {\r\n            if (err) console.error(err)\r\n            else {\r\n              console.log('Controller File written successfully\\n')\r\n            }\r\n          }\r\n        )\r\n      } else {\r\n        console.log('Controller File not written\\n')\r\n      }\r\n\r\n      if (\r\n        fs.existsSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/router-sample.txt'\r\n        )\r\n      ) {\r\n        let controller = fs.readFileSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/router-sample.txt'\r\n        )\r\n        const controllerCode = Buffer.from(controller)\r\n          .toString()\r\n          .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n          .replace(/{{MODEL_NAME}}/g, modelName)\r\n        fs.writeFile(\r\n          `${srcDirName}/modules/${moduleFile}/${moduleFile}-router.ts`,\r\n          controllerCode,\r\n          (err) => {\r\n            if (err) console.error(err)\r\n            else {\r\n              console.log('Router File written successfully\\n')\r\n            }\r\n          }\r\n        )\r\n      } else {\r\n        console.log('Router File not written\\n')\r\n      }\r\n\r\n      if (\r\n        fs.existsSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/service-sample.txt'\r\n        )\r\n      ) {\r\n        let controller = fs.readFileSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/service-sample.txt'\r\n        )\r\n        const controllerCode = Buffer.from(controller)\r\n          .toString()\r\n          .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n          .replace(/{{MODEL_NAME}}/g, modelName)\r\n        fs.writeFile(\r\n          `${srcDirName}/modules/${moduleFile}/${moduleFile}-service.ts`,\r\n          controllerCode,\r\n          (err) => {\r\n            if (err) console.error(err)\r\n            else {\r\n              console.log('Service File written successfully\\n')\r\n            }\r\n          }\r\n        )\r\n      } else {\r\n        console.log('Service File not written\\n')\r\n      }\r\n\r\n      if (\r\n        fs.existsSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/repository-sample.txt'\r\n        )\r\n      ) {\r\n        let controller = fs.readFileSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/repository-sample.txt'\r\n        )\r\n        const controllerCode = Buffer.from(controller)\r\n          .toString()\r\n          .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n          .replace(/{{MODEL_NAME}}/g, modelName)\r\n        fs.writeFile(\r\n          `${srcDirName}/modules/${moduleFile}/${moduleFile}-repository.ts`,\r\n          controllerCode,\r\n          (err) => {\r\n            if (err) console.error(err)\r\n            else {\r\n              console.log('Repository File written successfully\\n')\r\n            }\r\n          }\r\n        )\r\n      } else {\r\n        console.log('Repository File not written\\n')\r\n      }\r\n\r\n      if (\r\n        fs.existsSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/module-sample.txt'\r\n        )\r\n      ) {\r\n        let controller = fs.readFileSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/module-sample.txt'\r\n        )\r\n        const controllerCode = Buffer.from(controller)\r\n          .toString()\r\n          .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n          .replace(/{{MODEL_NAME}}/g, modelName)\r\n        fs.writeFile(\r\n          `${srcDirName}/modules/${moduleFile}/${moduleFile}-module.ts`,\r\n          controllerCode,\r\n          (err) => {\r\n            if (err) console.error(err)\r\n            else {\r\n              console.log('Module File written successfully\\n')\r\n            }\r\n          }\r\n        )\r\n      } else {\r\n        console.log('Module File not written\\n')\r\n      }\r\n\r\n      if (\r\n        fs.existsSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/interfaces-sample.txt'\r\n        )\r\n      ) {\r\n        let controller = fs.readFileSync(\r\n          srcDirName +\r\n            '/node_modules/@pullup.tech/cms/samples/interfaces-sample.txt'\r\n        )\r\n        const controllerCode = Buffer.from(controller)\r\n          .toString()\r\n          .replace(/{{MODULE_NAME}}/g, moduleFile)\r\n          .replace(/{{MODEL_NAME}}/g, modelName)\r\n        fs.writeFile(\r\n          `${srcDirName}/modules/${moduleFile}/${moduleFile}-interfaces.ts`,\r\n          controllerCode,\r\n          (err) => {\r\n            if (err) console.error(err)\r\n            else {\r\n              console.log('Interfaces File written successfully\\n')\r\n            }\r\n          }\r\n        )\r\n      } else {\r\n        console.log('Interfaces File not written\\n')\r\n      }\r\n    })\r\n  }\r\n\r\n  removeModule(srcDirName: string, name: string) {\r\n    if (fs.existsSync(`${srcDirName}/modules/${name}`)) {\r\n      fs.rmdir(\r\n        `${srcDirName}/modules/${name}`,\r\n        { recursive: true },\r\n        (error) => {\r\n          if (error) {\r\n            console.error(error)\r\n          } else {\r\n            console.log('Folder Deleted!')\r\n          }\r\n        }\r\n      )\r\n    }\r\n  }\r\n}\r\n"],"names":[],"version":3,"file":"types.d.ts.map"}